#ifndef DRONECONTROLSYSTEM_DRONE_H
#define DRONECONTROLSYSTEM_DRONE_H

#include <string>
#include <sw/redis++/redis++.h>
#include <thread>

using namespace sw::redis;

namespace drones {
    class Drone {
    public:
        Drone(int, Redis& sharedRedis); // Constructor
        ~Drone(); // Destructor

        Redis& drone_redis;   // This is the shared redis connection used for data/status updates
        std::pair<float, float> position;

        [[nodiscard]] int getId() const;

    private:
        const int id;               // TODO: it should be generated by the system
        std::string status;         // TODO: Change to enum
        std::string redis_id;
        std::string data;

        std::thread drone_thread;

        void Run();
        void Move();                // FIXME: This is a placeholder for the movement function
    };

    int Init(Redis& redis); // This initializes the drone PROCESS
} // drones

#endif //DRONECONTROLSYSTEM_DRONE_H