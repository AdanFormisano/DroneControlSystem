#ifndef DRONECONTROLSYSTEM_DRONE_H
#define DRONECONTROLSYSTEM_DRONE_H

#include <string>
#include <sw/redis++/redis++.h>
#include "ChargeBase.h" // Ensure this is included for charging functionality
#include <thread>

using namespace sw::redis;

namespace drones {
    int Init(Redis& redis); // This initializes the drone PROCESS

    class Drone {
    public:
        Drone(int, Redis& sharedRedis); // Constructor

        Redis& drone_redis;   // TODO: Check if it needs to be static
        std::pair<float, float> position;

        std::thread::id getThreadId() { return drone_thread_id; }
        void Run();

    private:
        const int id;               // TODO: it should be generated by the system
        std::string redis_id;
        std::unordered_map<std::string, std::string> drone_data;
        std::string status;         // TODO: Change to enum
        float drone_charge;

        std::thread::id drone_thread_id;

        // For charging interaction
        void requestCharging();
        void onChargingComplete();

        // Getters for demonstration and utility
        [[nodiscard]] int getId() const;
        [[nodiscard]] int getCharge() const;
        [[nodiscard]] std::string getStatus() const;

        // Utilize for charging simulation
        void setCharge(int newCharge);
        void Move();                // FIXME: This is a placeholder for the movement function
        void UpdateStatus();        // FIXME: This is a placeholder for the status update function
    };

    class DroneManager {
    private:
        std::vector<std::unique_ptr<Drone>> drone_vector;
        std::vector<std::thread> drone_threads;

    public:
        void CreateDrone(int number_of_drones, Redis& shared_redis);
        void PrintDroneThreadsIDs() const;

        ~DroneManager();
    };
} // drones

#endif //DRONECONTROLSYSTEM_DRONE_H