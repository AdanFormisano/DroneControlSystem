#ifndef DRONECONTROLSYSTEM_DRONE_H
#define DRONECONTROLSYSTEM_DRONE_H
#include <string>
#include <sw/redis++/redis++.h>
#include <thread>

using namespace sw::redis;

namespace drones {
    class Drone {
    public:
        Drone(int, Redis& sharedRedis); // Constructor

        std::pair<float, float> position;
        Redis& drone_redis;   // TODO: Check if it needs to be static

        void Run();
        std::thread::id getThreadId() { return drone_thread_id; }

    private:
        const int drone_id;               // TODO: it should be generated by the system
        std::string redis_id;
        std::unordered_map<std::string, std::string> drone_data;
        std::string drone_status;         // TODO: Change to enum
        float drone_charge;

        std::thread::id drone_thread_id;

        void Move();                // FIXME: This is a placeholder for the movement function
        void UpdateStatus();        // FIXME: This is a placeholder for the status update function
    };
} // drones
#endif //DRONECONTROLSYSTEM_DRONE_H
