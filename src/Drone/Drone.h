#ifndef DRONECONTROLSYSTEM_DRONE_H
#define DRONECONTROLSYSTEM_DRONE_H
#include "../ChargeBase/ChargeBase.h" // Ensure this is included for charging functionality
#include "../globals.h"
#include <string>
#include <sw/redis++/redis++.h>
#include <thread>

using namespace sw::redis;

namespace drones {
    // TODO: Clean up the class and check the members
    class Drone {
    public:
        Drone(int, Redis& sharedRedis); // Constructor
        ~Drone() = default; // Destructor
 
        std::string status = "idle";
        std::pair<float, float> position;
        Redis& drone_redis;   // TODO: Check if it needs to be static

        void Run();
        std::thread::id getThreadId() { return drone_thread_id; }

        // Utilize for charging simulation
        void setCharge(float newCharge);
        [[nodiscard]] float getCharge() const;
        void onChargingComplete();

    private:
        const int drone_id;               // TODO: It should be generated by the system
        std::string redis_id;
        std::string drone_status;         // TODO: Change to enum
        float drone_charge;
        std::unordered_map<std::string, std::string> drone_data;
        // TODO: Add the last time the drone was updated
        std::thread::id drone_thread_id;

        int tick_n;

        // [[nodiscard]] std::string getStatus() const;
        void Move();                // FIXME: This is a placeholder for the movement function
        void UpdateStatus();        // FIXME: This is a placeholder for the status update function

        // For charging interaction
        void requestCharging();
    };
} // drones
#endif //DRONECONTROLSYSTEM_DRONE_H
