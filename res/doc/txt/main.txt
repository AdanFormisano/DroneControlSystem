**1. Introduzione**

Nel seguito si propongono alcuni progetti d'esame per il corso di Ingegneria del Software. Oltre ai progetti proposti dal docente, gli studenti possono proporre dei loro progetti. I progetti possono essere svolti in gruppo, con ciascun gruppo composto da almeno uno studente e al massimo 3 studenti. I progetti possono essere discussi prima o dopo la prova a scelta multipla. Il voto viene verbalizzato quando sono completati sia la prova a scelta multipla che il progetto. Ciascun gruppo, una volta scelto il progetto (sia tra quelli proposti dal docente che tra quelli proposti dagli studenti), deve mandare una email al docente ed attendere l’approvazione. Questo perché viene implementato un sorta di load balancing per evitare che tutti i gruppi si concentrino sugli stessi progetti. Ciascun gruppo deve consegnare:
- Una relazione sul progetto.
- Il software per il progetto.

**2. Struttura della Relazione**

La relazione conterrà le seguenti sezioni:

**2.1 Descrizione Generale**

Una descrizione generale del sistema che si vuole realizzare. Questa descrizione dovrebbe anche contenere almeno una figura che illustra il sistema ed il suo ambiente operativo.

**2.2 User Requirements**

Una descrizione dei requisiti utenti. Ogni requisito deve essere numerato e deve esprimere un solo vincolo sul sistema. Questa sezione deve contenere i diagrammi Use Case dell'UML per almeno due use cases.

**2.3 System Requirements**

Una descrizione dei requisiti di sistema. Ogni requisito deve essere numerato e deve esprimere un solo vincolo sul sistema. Questa sezione conterrà inoltre:
- Il diagramma dell’architettura del sistema.
- Almeno un Activity Diagram UML per mostrare come le componenti del sistema concorrono a soddisfare i requisiti utenti.
- Almeno uno State Diagram UML per una delle componenti del sistema.
- Almeno un Message Sequence Chart UML per la comunicazione tra le componenti del sistema.

**2.4 Implementation**

Una descrizione generale dell’implementazione. Una descrizione con pseudo-codice per tutte le componenti del sistema. Lo schema del (o dei) DB usati. Una descrizione delle connessioni con Redis.

**2.5 Risultati Sperimentali**

Descrivere i risultati ottenuti dalla simulazione del sistema.

**3. Struttura del Software**

Il software di ogni progetto deve contenere i seguenti elementi:

**3.1 Test Generator**

Il test generator, cioè un modello dell’ambiente in cui il software opera, chiamato anche Environment per evidenziare il fatto che esso modella inputs dall’ambiente operativo per il software. Assicurarsi che l'environment sia completo, cioè sia in grado con probabilità non nulla di generare qualsiasi sequenza di test.

**3.2 System Under Design (SUD)**

Il System Under Design (SUD), cioè il sistema che si sta progettando. Il SUD è realizzato in C++ e consiste in processi comunicanti con Redis e con un DB PostgreSQL per i dati (se necessario) e per i log delle esecuzioni (sempre necessari per la realizzazione dei monitors). Ciascun processo è una macchina a stati che legge da streams Redis, esegue computazioni e ritorna outputs su streams Redis. Si raccomanda di realizzare processi piccoli in modo che siano facilmente verificabili e validabili.

**3.3 Monitor**

Un monitor per ciascuno dei requisiti di interesse. Si realizzino almeno tre monitors per i requisiti funzionali ed almeno due monitors per i requisiti non funzionali. I monitor prendono input dal DB con i log e ritornano il proprio output sul medesimo DB.

**4. Progetto da Fare**

**4.1 Controllo Formazione Droni**

Si progetti il centro di controllo per una formazione di droni che deve sorvegliare un'area data. Ogni drone ha un'autonomia di 30 minuti di volo ed impiega un tempo di minimo 2 ore e massimo 3 ore per ricaricarsi. Il tempo di ricarica è scelto casualmente nell'intervallo [2h, 3h]. Ogni drone si muove alla velocità di 30 Km/h. L'area da monitorare misura 6 × 6 Km. Il centro di controllo e ricarica si trova al centro dell'area da sorvegliare. Il centro di controllo manda istruzioni ai droni in modo da garantire che ogni punto dell'area sorvegliata sia verificato almeno ogni 5 minuti. Un punto è verificato al tempo t se al tempo t c'è almeno un drone a distanza inferiore a 10m dal punto. Il progetto deve includere i seguenti componenti:
1. Un modello (test generator) per i droni.
2. Un modello per il centro di controllo.
3. Un DB per i dati (ad esempio, stato di carica dei droni) ed i log.
4. Monitors per almeno tre proprietà funzionali.
5. Monitors per almeno due proprietà non-funzionali.

