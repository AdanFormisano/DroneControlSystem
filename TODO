 ✔ High consumption state @done (24-09-25 22:15)
     ✔ Drone has 0% charge and dies @done (24-09-25 22:15)
         Check if charge is 0%, if true send to Dead state
 ✔ Reconnected fault state @done (24-09-23 18:37)
 ✔ Disconnected fault state @done (24-09-23 21:14)
 ✔ Dead fault state @done (24-09-23 21:14)

============================================= 
 ✔ Debug case where charge is 0% and drone should go to DEAD
 ☐ Change DEAD state to "Empty" Drone => DB will have entries for dead drones that the monitors can analyze (for the duration of the wave life)
 ✔ Consider encreasing High_consumption factor (at least 1.5x)

 ✔ Correctly terminate the simulation @done (24-09-25 18:15)
     ✔ Check if DB has all the simulated ticks @done (24-09-25 18:15)
 ✔ DC "checked" calculations @done (24-09-25 18:00)
 ✔ Check when to spawn wave @done (24-09-25 16:06)
 ✔  Kill waves @done (24-09-24 14:58)
     ✔ Correct final charging state: wave must die => correct simulation duration (conditions) @done (24-09-24 14:58)
 ✔ Wave constructor using recycled drones @done (24-09-23 18:18)
 ✔ Fix syncing with Redis @done (24-09-23 18:33)
    ✔ With named_semaphores implemented Redis' use for sync (in process init) is not needed @done (24-09-23 18:33)

============================================= 
 ☐ TimeToReadData => SystemPerformance
     ☐ Create input for message_queue
 ☐ DroneChargeMonitor
     ☐ Fix query for drones that arrived at base
     ☐ Fix query for exploded drones
 ☐ CoverageMonitor
     ☐ WaveCoverageMonitor
     ☐ AreaCoverageMonitor
     ☐ When a drone is WORKING and then disconnects the monitor should detected it as an issue
     
 ✔ RechargeTimeMonitor @done (24-09-23 21:18)